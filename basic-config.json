// Configuration for ChordPro
// 
// This is a really relaxed JSON document, see
// https://metacpan.org/pod/JSON::Relaxed#REALLY-RELAXED-EXTENSIONS

// Settings for A2Crd (input) frontend.
a2crd {

  // Analysis strategy.
  classifier : pct_chords

  // Treat leading lyrics lines as title/subtitle lines.
  infer-titles : true

  // Tab stop width for tab expansion. Set to zero to disable.
  tabstop : 8
}

// Assets (placeholder).
assets {}

// Format to show chord names. May contain markup
chord-formats {

  // Format string for rendering common chord names.
  common : "%{root|%{}%{qual|%{}}%{ext|%{}}%{bass|/%{}}|%{name}}"

  // Format string for rendering nashville chord names.
  nashville : "%{root|%{}%{qual|<sup>%{}</sup>}%{ext|<sup>%{}</sup>}%{bass|/<sub>%{}</sub>}|%{name}}"

  // Format string for rendering roman chord names.
  roman : "%{root|%{}%{qual|<sup>%{}</sup>}%{ext|<sup>%{}</sup>}%{bass|/<sub>%{}</sub>}|%{name}}"
}

// Settings for ChordPro (output) backend.
chordpro {

  // Appearance of chorus recall.
  // Default: print the tag using the type.
  // Alternatively quote the lines of the preceding chorus.
  // If no tag+type or quote: use {chorus}.
  // Note: Variant 'msp' always uses {chorus}.
  chorus.recall {
    quote : false
    tag   : ""
    type  : ""
  }

  // Retain comments in the output.
  comments : retain
}

// Tables of contents.
// An array of hashes each describing one table of contents.
contents : [
  {
  
    // The metadata for this toc. One or two items.
    fields : [ songindex ]
  
    // For future use.
    fold : false
  
    // The label (title) for this toc.
    label : "Table of Contents"
  
    // The format for the toc lines.
    line : "%{title}"
  
    // Omit this toc.
    omit : false
  
    // The format for the page numbers in the toc.
    pageno : "%{page}"
  
    // Template song for the toc.
    template : stdtoc
  }
  {
  
    // The metadata for this toc. One or two items.
    fields : [ sorttitle artist ]
  
    // For future use.
    fold : false
  
    // The label (title) for this toc.
    label : "Contents by Title"
  
    // The format for the toc lines.
    line : "%{title}%{artist| - %{}}"
  
    // Omit this toc.
    omit : false
  
    // The format for the page numbers in the toc.
    pageno : "%{page}"
  
    // Template song for the toc.
    template : stdtoc
  }
  {
  
    // The metadata for this toc. One or two items.
    fields : [ artist sorttitle ]
  
    // For future use.
    fold : false
  
    // The label (title) for this toc.
    label : "Contents by Artist"
  
    // The format for the toc lines.
    line : "%{artist|%{} - }%{title}"
  
    // Omit this toc.
    omit : true
  
    // The format for the page numbers in the toc.
    pageno : "%{page}"
  
    // Template song for the toc.
    template : stdtoc
  }
]

// Date formats. Format is a strftime template.
dates.today.format : "%A, %B %e, %Y"

// Miscellaneous debug settings.
debug {
  a2crd       : 0
  abc         : 0
  assets      : 0
  chords      : 0
  config      : 0
  csv         : 0
  echo        : 0
  fonts       : 0
  images      : 0
  layout      : 0
  ly          : 0
  meta        : 0
  mma         : 0
  ops         : 0
  pages       : 0
  paths       : 0
  pp          : 0
  runtimeinfo : 1
  song        : 0
  songfull    : 0
  spacing     : 0
  svg         : 0
  txtblk      : 0
  x1          : 0
  x2          : 0
  x3          : 0
}

// Delegates.
// Basically a delegate is a section {start_of_XXX} which content is
// collected and handled later by the delegate module.
// Each delegate has at least the following fields:
// "type": "image", "none" or "omit".
//   type = "none" treats the section as a generic section,
//   type = "omit" ignores the section
// "module": the name of the module that implements the delegate
// "handler": the entry point in the module.
delegates {

  // Embedding ABC.
  abc {

    // No longer used -- ./default.abc will be used if program tool.
    config : default

    // Default handler "abc2svg" uses program (if set),
    // otherwise embedded QuickJS or external QuickJS.
    // Handler "quickjs_xs" uses embedded QuickJS only.
    // Handler "quickjs_qjs" uses external QuickJS only.
    // Handler "quickjs" uses internal or external QuickJS.
    handler : abc2svg
    module     : ABC
    preamble   : [
      "%%textfont pdf.fonts.text"
      "%%vocalfont pdf.fonts.text"
      "%%gchordfont pdf.fonts.chord"
    ]
    preprocess.abc : []
    program    : ""
    type       : image
  }

  // Embedding Lilypond.
  ly {
    config   : default
    handler  : ly2svg
    module   : Lilypond

    // The preamble is a list of lines inserted before the lilipond data,
    // This is a good place to set the version and global customizations.
    preamble : [
      '\\version "2.21.0"'
      "\\header { tagline = ##f }"
    ]
    program  : ""
    type     : image
  }

  // Embedding SVG.
  svg {
    handler : svg2svg
    module  : SVG
    type    : image
  }

  // Embedding textblock.
  textblock {
    handler : txt2xform
    module  : TextBlock
    type    : image
  }
}

// Format for error messages.
diagnostics.format : '"%f", line %n, %m\n' \
                     '\t%l'

// Selects which chords to print at the end of the song.
// Note that the type of diagram (strings, keyboard) is determined
// by the value of "instrument.type".
diagrams {

  // Shows selected or all chord diagrams at end.
  // "all": shows all chords
  // "user": shows user defined chords only
  // "none": suppresses chords from being printed
  show : all

  // Sorts the diagrams by key. Default is order of appearance.
  sorted : false

  // Chords (names) that will not generate diagrams, e.g. if they
  // are considered trivial.
  suppress : []
}

// Settings for HTML output.
// Styles for display and printing.
html.styles {
  display : chordpro.css
  print   : chordpro_print.css
}

// Includes are processed first, before the rest of
// the config file.
// 
// "include" takes a list of either filenames or preset names.
include : [ guitar ]

// Description of the instrument.
// Actual values are set from an included instrument config.
instrument {

  // Descriptive instrument name.
  description : ""

  // Instrument type.
  type : ""
}

// Settings for LaTeX backend.
latex {

  // Include paths for templates.
  template_include_path : []

  // Templates for LaTeX generation.
  templates {

    // Helper template to render comments.
    comment : comment.tt

    // Helper template to render images.
    image : image.tt

    // Master template to render the songbook.
    songbook : songbook.tt
  }
}

// Globally defined (added) meta data,
// This is explicitly NOT intended for the metadata items above.
// Do NOT remove or change "_configversion"!
meta._configversion : [ 6.031 ]

// Metadata.
// For these keys you can use {meta key ...} as well as {key ...}.
// Important: "title" and "subtitle" must always be in this list.
metadata {

  // Split data on separator.
  autosplit : true

  // Known metadata items.
  keys : [
    title
    sorttitle
    subtitle
    artist
    composer
    lyricist
    arranger
    album
    copyright
    year
    key
    time
    tempo
    capo
    duration
  ]

  // The separator is used to concatenate multiple values.
  // If autosplit is true, the separator is also used to split
  // values upon input.
  separator : "; "

  // If strict, only the keys named here are allowed.
  // Otherwise, {meta ...} will accept any key.
  strict : true
}

// Note (chord root) names.
// In case of alternatives, the first one is used for output.
// Note that it is tempting to use real sharps and flats for output,
// but most fonts don't have the glyphs.
notes {

  // Note names, using flats. \u266f is MUSICAL SYMBOL FLAT.
  flat : [
    C
    [ Db Des "D\u266d" ]
    D
    [ Eb Es Ees "E\u266d" ]
    E
    F
    [ Gb Ges "G\u266d" ]
    G
    [ Ab As Aes "A\u266d" ]
    A
    [ Bb Bes "B\u266d" ]
    B
  ]

  // Movable means position independent (e.g. nashville).
  movable : false

  // Note names, using sharps. \u266f is MUSICAL SYMBOL SHARP.
  sharp : [
    C
    [ C# Cis "C\u266f" ]
    D
    [ D# Dis "D\u266f" ]
    E
    F
    [ F# Fis "F\u266f" ]
    G
    [ G# Gis "G\u266f" ]
    A
    [ A# Ais "A\u266f" ]
    B
  ]

  // The note system used.
  system : common
}

// Settings for the parser/preprocessor.
// For selected lines, you can specify a series of 
// { "target" : "xxx", "replace" : "yyy" }
// Every occurrence of "xxx" will be replaced by "yyy".
// Use "pattern" instead of "target" for regular expression replacement.
// Use wisely.
parser.preprocess {
  all       : []
  directive : []
  songline  : []
}

// Settings for PDF output.
pdf {

  // PDF file to add as back matter.
  back-matter : ""

  // Value for Capo heading when using chordscolumn.
  capoheading : "%{capo|Capo: %{}}"

  // Alternative songlines with chords in a side column.
  // Value is the column position.
  chordscolumn : 0

  // Appearance of chorus.
  chorus {

    // Appearance of side bar.
    bar {

      // Bar colour.
      color : foreground

      // Bar offset to the left of the text. Suppress when zero.
      offset : 8

      // Bar width. Suppress when zero.
      width : 1
    }

    // Indent of the chorus, not including bar.
    indent : 0

    // Appearance of chorus recall.
    recall {

      // Quote the chorus like a chorus.
      choruslike : false

      // Quote the chorus.
      quote : false

      // Label for recalled chorus.
      tag : Chorus

      // Font for tag text.
      type : comment
    }

    // Label for Chorus.
    tag : Chorus
  }

  // Distance between columns in multi-column mode.
  columnspace : 20
  corefonts.remap         : null

  // CSV generation for MobileSheetsPro. May need adaptation for other tools.
  // Note that the resultant file will conform to RFC 4180.
  // 
  // Add "omit" : true to omit a field; to add fields with fixed
  // values, use "value". See the entry with name "my_field".
  csv {

    // The fields for the CSV.
    fields : [
      {
        meta : title
        name : title
      }
      {
        meta : pagerange
        name : pages
      }
      {
        meta : sorttitle
        name : "sort title"
      }
      {
        meta : artist
        name : artists
      }
      {
        meta : composer
        name : composers
      }
      {
        meta : collection
        name : collections
      }
      {
        meta : key_actual
        name : keys
      }
      {
        meta : year
        name : years
      }
      {
        name  : my_field
        omit  : true
        value : text
      }
    ]

    // Separator to join field values.
    separator : ;

    // Restrict CSV to song pages only (do not include matter pages)
    songsonly : true

    // Separator to join meta values.
    vseparator : |
  }

  // Appearance of chord diagrams for string instruments.
  // A chord diagram consists of a number of cells.
  // Cell dimensions are specified by "width" and "height".
  // The horizontal number of cells depends on the number of strings.
  // The vertical number of cells is "vcells", which should
  // be 4 or larger to accommodate most chords.
  // The horizontal distance between diagrams is "hspace" cells.
  // The vertical distance is "vspace" cells.
  diagrams {

    // Alignment for "top", "bottom" and "below".
    // Possible values are "left" (default), "right", "center" and "spread".
    align : left

    // Thickness of bars, fraction of dot width.
    barwidth : 0.8

    // Size of the fret dot, fraction of cell width.
    dotsize : 0.8

    // Show finger settings, if available.
    fingers : true

    // Height of each diagram cell.
    height : 6

    // Horizontal space between diagrams.
    hspace : 3.95

    // Thickness of the diagram lines as a fraction of 'width'.
    linewidth : 0.1

    // Thickness of the top nut, in 'linewidth'.
    nutwidth : 5

    // Diagrams for all chords of the song can be shown at the
    // "top", "bottom" or "right" side of the first page,
    // or "below" the last song line.
    show : bottom

    // The number of frets shown.
    vcells : 4

    // Vertical space between diagrams.
    vspace : 3

    // Width of each diagram cell.
    width : 6
  }

  // Even/odd pages (1), odd/even (-1) or odd (0).
  even-odd-pages : 1

  // The font families.
  fontconfig {
    courier {
      ""         : Courier
      bold       : Courier-Bold
      bolditalic : Courier-BoldOblique
      italic     : Courier-Oblique
    }
    dingbats.  : ZapfDingbats
    helvetica {
      ""          : Helvetica
      bold        : Helvetica-Bold
      boldoblique : Helvetica-BoldOblique
      oblique     : Helvetica-Oblique
    }
    mono {
      ""         : Courier
      bold       : Courier-Bold
      bolditalic : Courier-BoldOblique
      italic     : Courier-Oblique
    }
    monospace {
      ""         : Courier
      bold       : Courier-Bold
      bolditalic : Courier-BoldOblique
      italic     : Courier-Oblique
    }
    sans {
      ""         : Helvetica
      bold       : Helvetica-Bold
      bolditalic : Helvetica-BoldOblique
      italic     : Helvetica-Oblique
    }
    sans-serif {
      ""         : Helvetica
      bold       : Helvetica-Bold
      bolditalic : Helvetica-BoldOblique
      italic     : Helvetica-Oblique
    }
    serif {
      ""         : Times-Roman
      bold       : Times-Bold
      bolditalic : Times-BoldItalic
      italic     : Times-Italic
    }
    times {
      ""         : Times-Roman
      bold       : Times-Bold
      bolditalic : Times-BoldItalic
      italic     : Times-Italic
    }
  }

  // Font families and properties.
  // "fontconfig" maps members of font families to physical fonts.
  // Optionally, additional properties of the fonts can be specified.
  // Physical fonts can be the names of TrueType/OpenType fonts,
  // or names of built-in fonts (corefonts).
  // Relative filenames are looked up in the fontdir.
  // For example:
  // "fontdir" : [ "/usr/share/fonts/liberation", "/home/me/fonts" ]
  fontdir : []

  // "fonts" maps output elements to fonts as defined in "fontconfig".
  // The elements can have a background colour associated.
  // Colours are "#RRGGBB" or predefined names like "black", "white",
  // and lots of others.
  // NOTE: In the built-in config we use only "name" since that can
  // be overruled with user settings.
  // 
  // Some element mappings can be specified, but need not since
  // they default to other elements.
  // subtitle       --> text
  // chorus         --> text
  // comment        --> text
  // comment_italic --> chord
  // comment_box    --> chord
  // annotation     --> chord
  // toc            --> text
  // grid           --> chord
  // grid_margin    --> comment
  // footer         --> subtitle @ 60%
  // empty          --> text
  // diagram        --> comment
  // diagram_base   --> text (but at a small size)
  fonts {

    // Font for typesetting chord names.
    chord : "Helvetica-Oblique 10"

    // Font for numbered chord dots.
    chordfingers {
      file        : ChordProSymbols.ttf

      // Colour specification.
      numbercolor : background
    }

    // Font for typesetting comment text.
    comment {

      // Colour specification.
      background : foreground-light
      name       : Helvetica
      size       : 12
    }

    // Font for typesetting boxed comment text.
    comment_box {
      frame : 1
      name  : Helvetica
      size  : 12
    }

    // Font for typesetting italised comment text.
    comment_italic : "Helvetica-Oblique 12"

    // Font for typesetting grids.
    grid : "Helvetica 10"

    // Font for typesetting tabs.
    tab : "Courier 10"

    // Font for typesetting lyrics.
    text : "Times-Roman 12"

    // Font for typesetting titles.
    title : "Times-Bold 14"

    // Font for typesetting the table of contents.
    toc : "Times-Roman 11"
  }

  // Space for page footers.
  footspace : 20

  // Formats.
  // Pages have two title elements and one footer element. They also
  // can have a page of an existing PDF file as underlay (background).
  // Topmost is "title". It uses the "title" font as defined further below.
  // Second is "subtitle". It uses the "subtitle" font.
  // The "footer" uses the "footer" font.
  // All elements can have three fields, that are placed to the left side,
  // centered, and right side of the page.
  // The contents of all fields is defined below. You can use metadata
  // items in the fields as shown. By default, the "title" element shows the
  // value of metadata item "title", centered on the page. Likewise
  // "subtitle".
  // NOTE: The "title" and "subtitle" page elements have the same names
  // as the default metadata values which may be confusing. To show
  // metadata item, e.g. "artist", add its value to one of the
  // title/subtitle fields. Don't try to add an artist page element.
  // 
  // The left, center and right parts are for odd pages.
  // On even pages, the left and right parts are swapped.
  // It is possible to define distinct even page formats with "default-even",
  // "title-even" and "first-even".
  //    
  // When a background document is specified, with odd/even printing,
  // the 1st background page is used for left pages and
  // the next page (if it exists) for right pages.
  // For even/odd printing, the order is reversed.
  formats {

    // By default, a page has:
    default {

      // Background page.
      background : ""

      // Three-part title format specification, left, center, right.
      footer : [ "%{title}" "" "%{page}" ]

      // Three-part title format specification, left, center, right.
      subtitle : [ "" "" "" ]

      // Three-part title format specification, left, center, right.
      title : [ "" "" "" ]
    }

    // Filler pages (for alignment) are empty by default.
    filler {

      // Background page.
      background : ""

      // Three-part title format specification, left, center, right.
      footer : [ "" "" "" ]

      // Three-part title format specification, left, center, right.
      subtitle : [ "" "" "" ]

      // Three-part title format specification, left, center, right.
      title : [ "" "" "" ]
    }

    // The very first output page is slightly different:
    first {

      // Background page.
      background : ""

      // Three-part title format specification, left, center, right.
      footer : [ "" "" "" ]
    }

    // The first page of a song has:
    title {

      // Background page.
      background : ""

      // Three-part title format specification, left, center, right.
      footer : [ "" "" "%{page}" ]

      // Three-part title format specification, left, center, right.
      subtitle : [ "" "%{subtitle}" "" ]

      // Three-part title format specification, left, center, right.
      title : [ "" "%{title}" "" ]
    }
  }

  // PDF file to add as front matter.
  front-matter : ""

  // Grid section lines.
  // Suppress when "show" is false, e.g. for singers.
  // The width and colour of the cell bar lines can be specified.
  // Enable by setting the width to the desired width.
  grids {
    cellbar {

      // Colour of the cell bar.
      color : foreground-medium

      // Width of the cell bar.
      width : 0
    }

    // Show grid context in output.
    show : true

    // Colour of special symbols.
    symbols.color : blue

    // Properties of the volta.
    volta {

      // Colour of the volta.
      color : blue

      // Volta span (fraction of measure).
      span : 0.7
    }
  }

  // Heading on first page only, add the headspace to
  // the other pages so they become larger.
  head-first-only : false

  // Space for page titles.
  headspace : 60

  // PDF Properties. Arbitrary key/values may be added.
  // Note that the context for substitutions is the first song.
  info {

    // Name of the author.
    author : ""

    // Document keywords.
    keywords : ""

    // Document subject.
    subject : ""

    // Document title.
    title : "%{title}"
  }

  // Appearance of chord diagrams for keyboards.
  // A keyboard diagram consists of a number of keys.
  // Dimensions are specified by "width" and "height".
  // The horizontal distance between diagrams is "hspace" * "keys" * "width".
  kbdiagrams {

    // Alignment for "top", "bottom" and "below".
    // Possible values are "left" (default), "right", "center" and "spread".
    align : left

    // The leftmost white key. Must be "C" or "F".
    base : C

    // Height of the diagram.
    height : 20

    // Horizontal space between diagrams.
    hspace : 3.95

    // The number of white keys shown.
    keys : 14

    // Thickness of the diagram lines as a fraction of "width".
    linewidth : 0.1

    // Color of the 'pressed' keys.
    pressed : foreground-medium

    // Diagrams for all chords of the song can be shown at the
    // "top", "bottom" or "right" side of the first page,
    // or "below" the last song line.
    show : bottom

    // Vertical space between diagrams.
    vspace : 0.3

    // Width of a single (white) key.
    width : 4
  }

  // This opens a margin for margin labels.
  labels {

    // Alignment for the labels. Default is left.
    align : left

    // Alternatively, render labels as comments.
    // Values are "comment", "comment_italic" and "comment_box".
    comment : ""

    // Margin width. Default is 0 (no margin labels).
    // "auto" will automatically reserve a margin if labels are used.
    width : auto
  }

  // Choose a PDF::API2 compatible library, or leave empty to
  // have ChordPro choose one for you.
  library : ""

  // Page bottom margin, excluding footspace.
  marginbottom : 40

  // Page left margin.
  marginleft : 40

  // Page right margin.
  marginright : 40

  // Page top margin, excluding headspace.
  margintop : 80

  // PDF outlines (index) can be used in most PDF viewers
  // for quick navigation.
  outlines : [
    {
    
      // Initial display is collapsed.
      collapse : false
    
      // Primary and (optional) secondary fields.
      fields : [ sorttitle artist ]
    
      // For future use.
      fold : false
    
      // Title, omitted if there's only one outline.
      label : "By Title"
    
      // Make letter level if more entries than this value.
      letter : 5
    
      // The format for the outline entries.
      line : "%{title}%{artist| - %{}}"
    }
    {
    
      // Initial display is collapsed.
      collapse : false
    
      // Primary and (optional) secondary fields.
      fields : [ artist sorttitle ]
    
      // For future use.
      fold : false
    
      // Title, omitted if there's only one outline.
      label : "By Artist"
    
      // Make letter level if more entries than this value.
      letter : 5
    
      // The format for the outline entries.
      line : "%{artist|%{} - }%{title}"
    }
  ]

  // Align songs to even/odd pages. When greater than 1, force alignment.
  pagealign-songs : 1

  // Output paper size, e.g. "a4" or [595,842].
  papersize : a4

  // Show the page layout structure.
  // This is mainly for design and debugging.
  showlayout : false

  // How to reorder pages.
  // Sort pages by "title", "subtitle", "2page", "compact", "desc".
  // "sort-pages" is a comma separated list of the options above.
  // title  : sort pages alphabetically by title.
  // subtitle : sort pages alphabetically by subtitle. If this is
  //          used together with title, only title is used.
  // 2page :  make sure songs with even pages are placed on even
  //          pages, so most. if not all, of the song is visible
  //          in a normal book without needing to turn a page.
  //          A blank page is added to align.
  // compact: implies 2page - instead of adding a blank page,
  //          an odd-paged song is moved in front of this song to achieve
  //          even page alignment.
  //          Note: this option requires extra processing time since
  //          the songbook has to be processed twice.
  // desc :   modifier to sort descending.
  sort-pages : ""

  // Baseline distances as a factor of the font size.
  spacing {

    // Spacing for chord names.
    chords : 1.2

    // Spacing for diagram chords.
    diagramchords : 1.2

    // Spacing for empty (blank) lines.
    // By setting this to a small value you get fine-grained control over
    // the distance between song elements by adding empty lines.
    empty : 1

    // Spacing for grid lines.
    grid : 1.2

    // Spacing for lyrics.
    lyrics : 1.2

    // Spacing for tab lines.
    tab : 1

    // Spacing for page titles.
    title : 1.2

    // Spacing for table of contents lines.
    toc : 1.4
  }

  // Split marker for syllables that are smaller than chord width.
  // split-marker is a 3-part array: "start", "repeat", and "final".
  // "final" is always printed, last.
  // "start" is printed if there is enough room.
  // "repeat" is printed repeatedly to fill the rest.
  // If split-marker is a single string, this is "start".
  // All elements may be left empty strings.
  split-marker : [ "" "" "" ]

  // Theme
  theme {

    // Background colour. Usually white.
    background : none

    // Foreground colour. Usually black.
    foreground : black

    // Very light foreground colour
    foreground-light : grey90

    // Light foreground colour
    foreground-medium : grey70
  }

  // A {titles: left} directive may conflict with customized formats.
  // Set to true to ignore the directive.
  titles-directive-ignore : false
}

// General settings, often changed by configs and command line.
settings {

  // Strictness of parsing chord names.
  chordnames : strict

  // Always replace chords by their canonical form.
  chords-canonical : false

  // Chords under the lyrics.
  chords-under : false

  // If false, chorus labels are used as tags.
  choruslabels : true

  // Number of columns, default: 1.
  columns : 1

  // Eliminate capo by transposing chords.
  decapo : false

  // Force enharmonic when transposing (experimental).
  enharmonic-transpose : true

  // Consider text flowed.
  flowtext : false

  // Same, for annotations. Ignored unless inline-chords is set.
  // Must be a string containing pretext %s posttext.
  // Default is "%s".
  inline-annotations : %s

  // Chords inline instead of above.
  // May be a string containing pretext %s posttext.
  // Defaults to "[%s]" if set to a value that doesn't contain "%s".
  inline-chords : false

  // Obsolete.
  lineinfo : true

  // Suppress chords.
  // Command line: -l (--lyrics-only)
  lyrics-only : false

  // Memorize the chords from sections.
  memorize : false

  // Allow parsing of note names in [].
  notenames : false

  // Chords parsing strategy.
  // Strict (only known chords) or relaxed (anything that looks sane)
  strict : true

  // Suppress empty chord lines.
  // Command line: -a (--single-space).
  suppress-empty-chords : true

  // Suppress blank lyrics lines.
  suppress-empty-lyrics : true

  // Titles flush: default center.
  titles : center

  // Transcode chords.
  transcode : ""

  // Transpose chords.
  transpose : 0

  // Substitute Unicode sharp/flats in chord names.
  // Will fallback to the ChordProSymbols font if the selected chord font
  // doesn't have the glyphs.
  truesf : false

  // Indent for wrapped lines. Actual indent is the stringwidth.
  wrapindent : x
}

// Settings for Text (output) backend.
// See the ChordPro backend for details.
text.chorus.recall {
  quote : false
  tag   : ""
  type  : ""
}

// Table of Contents (obsolete, do not use).
toc {
  line  : "%{title}"
  order : page
  title : "Table of Contents"
}

// Definition of the strings for this instrument.
// This is usually set from an included instrument config.
// Note that string 1 is the highest string.
tuning : null

// User settings. Actual values are usually set by a separate config file.
user {

  // Full user name
  fullname : ""

  // Short user name.
  name : ""
}
